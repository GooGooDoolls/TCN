# -*- coding: utf-8 -*-
"""FIX_Copy of prediction using tcn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16nA6hfoVmZw-h_ttFelSxfGEoGV02qcS
"""

!pip install wget
!pip install keras-tcn
!pip install keras-tuner â€”upgrade
import wget
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tensorflow.keras import Input, Model
from tensorflow.keras.layers import Dense
from tqdm.notebook import tqdm

from tcn import TCN

asii=pd.read_excel('addd.xlsx',index_col=0)
asii

import matplotlib.pyplot as plt
plt.figure(figsize=(20,10))
plt.plot(asii['Close'])
plt.title ('Saham Astra Closing Price',fontsize=24)
plt.xlabel('Days')
plt.ylabel('Close Price')
plt.show()

# Get only the close price
asii = asii[['Close']]
asii.head()
asii

lookback_window=12

import numpy as np
asii=asii.values
asii

x = []
y = []
for i in tqdm(range(lookback_window, len(asii))):
    x.append(asii[i - lookback_window:i])
    y.append(asii[i])

print (x)
print(y)

x = np.array(x)
y = np.array(y)
print(x.shape)
print(y.shape)

!pip install keras-tuner

import keras_tuner
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Conv1D, Dense, Flatten
from tensorflow import keras
from kerastuner.tuners import RandomSearch
from kerastuner.engine.hyperparameters import HyperParameter

def build_tcn_model(hp):
    model = Sequential()
    num_conv_blocks = hp.Int('num_conv_blocks', min_value=1, max_value=3, step=1)
    # Hyperparameter untuk jumlah filter dalam setiap blok konvolusi TCN
    num_filters = hp.Int('num_filters', min_value=32, max_value=128, step=32)

    # Hyperparameter untuk panjang kernel konvolusi TCN
    kernel_size = hp.Int('kernel_size', min_value=2, max_value=5, step=1)

    # Hyperparameter untuk ukuran lapisan Dense di bagian akhir TCN
    dense_units = hp.Int('dense_units', min_value=32, max_value=128, step=32)

    # Menambahkan blok konvolusi TCN
    for _ in range(num_conv_blocks):
        model.add(Conv1D(filters=num_filters, kernel_size=kernel_size, activation='relu', padding='causal'))

    # Lapisan Flatten dan Dense di bagian akhir TCN
    model.add(Flatten())
    model.add(Dense(units=dense_units, activation='relu'))

    # Lapisan output
    model.add(Dense(units=1, activation='linear'))  # Misalnya, untuk masalah regresi

    # Kompilasi model
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mse', 'mae', 'RootMeanSquaredError',])

    return model

def initialize_tuner():
    tuner = RandomSearch(
        build_tcn_model,
        objective='val_loss',
        max_trials=5,  # Jumlah percobaan pencarian hyperparameter
        directory='tuner_directory',  # Direktori penyimpanan tuner
        project_name='tcn_hyperparameter_tuning'
    )
    return tuner

tuner = initialize_tuner()

tuner.search(x, y, epochs=10, validation_data=(x, y))

best_hyperparameters = tuner.get_best_hyperparameters(num_trials=1)[0]
print(f"Best Hyperparameters: {best_hyperparameters}")

best_model = tuner.get_best_models(num_models=1)[0]

print("Best Hyperparameters:", best_hyperparameters.get_config())

import pandas as pd
from tabulate import tabulate

best_hyperparameters_dict = best_hyperparameters.get_config()['values']

df = pd.DataFrame(list(best_hyperparameters_dict.items()), columns=['Hyperparameter', 'Value'])

table = tabulate(df, headers='keys', tablefmt='pretty', showindex=False)

# Menampilkan tabel
print("Best Hyperparameters:")
print(table)

predictions = best_model.predict(x)

plt.style.use("fivethirtyeight")
plt.figure(figsize = (20,10))
plt.plot(predictions)
plt.plot(y)
plt.title('Prediksi Saham Astra Closing Price Menggunakan Algoritma TCN')
plt.legend(['predicted', 'actual'])
plt.xlabel("days")
plt.ylabel("close price")
plt.show()

evaluation_results = best_model.evaluate(x, y)

print("Evaluation Results:")
for metric_name, metric_value in zip(best_model.metrics_names, evaluation_results):
    print(f"{metric_name}: {metric_value}")









from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import math

# Menghitung MAE
mae = mean_absolute_error(y, predict)

# Menghitung MSE
mse = mean_squared_error(y, predict)

# Menghitung RMSE
rmse = math.sqrt(mse)

print("MAE:", mae)
print("MSE:", mse)
print("RMSE:", rmse)

r2 = r2_score(y, predict)
print ('r2:',r2)

i = Input(shape=(lookback_window, 1))
m = TCN()(i)
m = Dense(1, activation='linear')(m)

model = Model(inputs=[i], outputs=[m])
model.summary()

model.compile('adam','mae')

print('Train...')
model.fit(x, y, epochs=3)

predict = model.predict(x)

predict

plt.style.use("fivethirtyeight")
plt.figure(figsize = (15,7))
plt.plot(predict)
plt.plot(y)
plt.title('Saham Astra Closing Price')
plt.legend(['predicted', 'actual'])
plt.xlabel("days")
plt.ylabel("close price")
plt.show()

df=pd.read_excel('addd.xlsx',index_col=0)
df = df[['Close']]
df.head()
df

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import math

# Menghitung MAE
mae = mean_absolute_error(y, predict)

# Menghitung MSE
mse = mean_squared_error(y, predict)

# Menghitung RMSE
rmse = math.sqrt(mse)

print("MAE:", mae)
print("MSE:", mse)
print("RMSE:", rmse)

r2 = r2_score(y, predict)
print ('r2:',r2)

